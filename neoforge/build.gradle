plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    neoForge {
        platformPackage = "forge"
    }
}

configurations {
    common
    forgeLike
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common, forgeLike
    runtimeClasspath.extendsFrom common, forgeLike
    developmentNeoForge.extendsFrom common
    developmentForgeLike.extendsFrom forgeLike
}

repositories {
    maven { url "https://maven.neoforged.net/releases/" }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    forgeLike(project(path: ":forge", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }
    shadowCommon(project(path: ":forge", configuration: "transformProductionNeoForge")) { transitive false }

    forgeRuntimeLibrary(implementation(shadowCommon('org.spongepowered:configurate-yaml:4.1.2')))
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")

    relocate 'org.yaml', 'com.gmail.picono435.dependencies.yaml'
    relocate 'org.spongepowered', 'com.gmail.picono435.dependencies.spongepowered'
    relocate 'io.leangen', 'com.gmail.picono435.dependencies.leagen'
    relocate 'org.checkerframework', 'com.gmail.picono435.dependencies.checkerframework'
    relocate 'com.google.errorprone', 'com.gmail.picono435.dependencies.errorprone'
    relocate 'me.lucko', 'com.gmail.picono435.dependencies.lucko'
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("neoforge")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

